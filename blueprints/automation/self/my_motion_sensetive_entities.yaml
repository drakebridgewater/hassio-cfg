blueprint:
  name: Turn on based on motion & presence & illuminance.
  domain: automation
  input:
    motion_sensor:
      name: Motion Sensor
      description: This sensor will trigger the turning on of the target entity.
      selector:
        entity:
          filter:
          - device_class:
            - motion
            domain:
            - binary_sensor
          multiple: true
    presence_sensor:
      name: Presensor Sensor
      description: This sensor will prevent the turning off of the target entity. This can be the same value as Motion Sensor, but this allows mmWave sensors to detect presence to prevent the entites from getting turned off. 
      selector:
        entity:
          filter:
          - device_class:
            - presence
            domain:
            - binary_sensor
          multiple: true
    target_entity:
      name: Target entity.
      description: The light, switch, scene to turn on (or script to run) when the
        automation is triggered.
      selector:
        entity: {}
    illuminance_sensor:
      name: Illuminance sensor
      description: This sensor will be used to determine the illumination.
      selector:
        entity:
          domain: sensor
          device_class: illuminance
    illuminance_cutoff:
      name: Illuminance cutoff value
      description: This input_number will be used to compare to the current illumination
        to determine if it is low.
      selector:
        entity:
          domain: input_number
    blocker_entity:
      name: (OPTIONAL) Blocking entity
      description: If this entity's state is on, it will prevent the automation from
        running. E.g. sleepmode or away mode.
      default:
      selector:
        entity: {}
    time_limit_after:
      name: (OPTIONAL) Only run after time.
      description: Automation will only run when time is later than this input_datetime
        value.
      default:
      selector:
        entity:
          domain: input_datetime
    time_limit_before:
      name: (OPTIONAL) Only run before time.
      description: Automation will only run when time is earlier than this input_datetime
        value.
      default:
      selector:
        entity:
          domain: input_datetime
    no_motion_wait:
      name: (OPTIONAL) Turn off wait time (minutes)
      description: Time in minutes to leave the target entity on after last motion
        is detected. If not used entity will not auto turn off.
      default:
      selector:
        entity:
          domain: input_number
    turn_off_blocker_entity:
      name: (OPTIONAL) Turn-off Blocking entity
      description: If this entity's state is on, it will prevent the target entity
        from turning off after the set delay.
      default:
      selector:
        entity: {}
    target_off_entity:
      name: (OPTIONAL) Turn-off entity
      description: If defined, this entity will be turned off instead of the default
        target entity. This can be helpful when using target entities of type scene
        or script.
      default:
      selector:
        entity: {}
  source_url: https://gist.github.com/freakshock88/2311759ba64f929f6affad4c0a67110b
mode: restart
max_exceeded: silent
variables:
  target_entity: !input 'target_entity'
  illuminance_currently: !input 'illuminance_sensor'
  illuminance_cutoff: !input 'illuminance_cutoff'
  blocker_entity: !input 'blocker_entity'
  time_limit_before: !input 'time_limit_before'
  time_limit_after: !input 'time_limit_after'
  no_motion_wait: !input 'no_motion_wait'
  entity_domain: '{{ states[target_entity].domain }}'
  turn_off_blocker_entity: !input 'turn_off_blocker_entity'
  target_off_entity: !input 'target_off_entity'
trigger:
  - platform: state
    entity_id: !input 'motion_sensor'
    to: 'on'
condition:
- condition: template
  value_template: '{{ (states[target_entity].state == ''on'') 
                        or (states[illuminance_currently].state | int < states[illuminance_cutoff].state | int)
    }}'
- condition: template
  value_template: '{{ (blocker_entity == none) or (states[blocker_entity].state == ''off'') }}'
- condition: template
  value_template: '{% set current_time = now().strftime("%H:%M")  %}

    {% if time_limit_before != none and time_limit_after == none 
      %} {{ states[time_limit_before].state > current_time 
    }} {% elif time_limit_before == none and time_limit_after != none
      %} {{ states[time_limit_after].state < current_time 
    }} {% elif time_limit_before != none and time_limit_after != none 
      %} {% set before_limit_is_on_next_day = time_limit_after > time_limit_before  
      %} {% if not before_limit_is_on_next_day 
        %} {{ (states[time_limit_after].state < current_time) and (states[time_limit_before].state > current_time) 
      }} {% elif before_limit_is_on_next_day 
        %} {{ (states[time_limit_before].state > current_time) or (states[time_limit_after].state < current_time) 
      }} {% endif 
    %} {% else 
      %} true
    {% endif %}

    '
action:
- service: homeassistant.turn_on
  entity_id: !input 'target_entity'
- condition: template
  value_template: '{{ no_motion_wait != none }}'
- wait_for_trigger:
  - platform: state
    entity_id: !input 'presence_sensor'
    from: 'on'
    to: 'off'
  - platform: numeric_state
    entity_id: !input 'illuminance_sensor'
    below: !input 'illuminance_cutoff'
- delay:
    minutes: '{{ states[no_motion_wait].state | int }}'
- condition: template
  value_template: '{{ (turn_off_blocker_entity == none) or (states[turn_off_blocker_entity].state == ''off'') }}'
- choose:
  - conditions:
    - condition: template
      value_template: '{{ (target_off_entity != none) }}'
    sequence:
    - service: homeassistant.turn_off
      entity_id: !input 'target_off_entity'
  default:
  - service: homeassistant.turn_off
    entity_id: !input 'target_entity'
