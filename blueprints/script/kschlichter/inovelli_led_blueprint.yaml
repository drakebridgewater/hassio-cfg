mode: parallel
max: 100
blueprint:
  name: Inovelli LED Settings and Effects Blueprint
  domain: script
  source_url: https://github.com/kschlichter/Home-Assistant-Inovelli-Effects-and-Colors/blob/master/blueprints/script/kschlichter/inovelli_led_blueprint.yaml
  description: Sets LED colors and effects on Inovelli "Black", "Red 500", "Red 800",
    and "Blue" Series switches, dimmers, and fan controllers through the Zwave JS,
    ZHA, and Zigbee2MQTT integrations.  Devices from all series can be used together,
    and can be called by floor, area, group, device, and entity.
  homeassistant:
    min_version: 2023.04.0
  input:
    floor:
      name: Floor
      description: Floor IDs containing areas with Inovelli devices.
      default: invalid
      selector:
        floor:
          multiple: true
          device:
          - integration: zwave_js
            manufacturer: Inovelli
            model: LZW30, LZW31, LZW30-SN, LZW31-SN, LZW36, VZW31-SN
          - integration: zha
            manufacturer: Inovelli
            model: VZM31-SN, VZM35-SN
          - integration: mqtt
            manufacturer: Inovelli
            model: Inovelli 2-in-1 switch + dimmer (VZM31-SN), Inovelli Fan Controller
              (VZM35-SN), 2-in-1 switch + dimmer (VZM31-SN), Fan Controller (VZM35-SN)
    area:
      name: Area
      description: Area names or IDs containing Inovelli devices.
      default: invalid
      selector:
        area:
          multiple: true
          device:
          - integration: zwave_js
            manufacturer: Inovelli
            model: LZW30, LZW31, LZW30-SN, LZW31-SN, LZW36, VZW31-SN
          - integration: zha
            manufacturer: Inovelli
            model: VZM31-SN, VZM35-SN
          - integration: mqtt
            manufacturer: Inovelli
            model: Inovelli 2-in-1 switch + dimmer (VZM31-SN), Inovelli Fan Controller
              (VZM35-SN), 2-in-1 switch + dimmer (VZM31-SN), Fan Controller (VZM35-SN)
    group:
      name: Group
      description: Group names or IDs for groups containing Inovelli devices.  Mix
        and match types as you like.
      default: invalid
      selector:
        entity:
          multiple: true
          filter:
          - domain:
            - group
            - fan
            - light
            - switch
    device:
      name: Device
      description: Device IDs of Inovelli devices.  Mix and match types as you like.
      default: invalid
      selector:
        device:
          multiple: true
          filter:
          - integration: zwave_js
            manufacturer: Inovelli
            model: LZW30
          - integration: zwave_js
            manufacturer: Inovelli
            model: LZW31
          - integration: zwave_js
            manufacturer: Inovelli
            model: LZW30-SN
          - integration: zwave_js
            manufacturer: Inovelli
            model: LZW31-SN
          - integration: zwave_js
            manufacturer: Inovelli
            model: LZW36
          - integration: zwave_js
            manufacturer: Inovelli
            model: VZW31-SN
          - integration: mqtt
            manufacturer: Inovelli
            model: 2-in-1 switch + dimmer (VZM31-SN)
          - integration: mqtt
            manufacturer: Inovelli
            model: Inovelli 2-in-1 switch + dimmer (VZM31-SN)
          - integration: zha
            manufacturer: Inovelli
            model: VZM31-SN
          - integration: mqtt
            manufacturer: Inovelli
            model: Fan Controller (VZM35-SN)
          - integration: mqtt
            manufacturer: Inovelli
            model: Inovelli Fan Controller (VZM35-SN)
          - integration: zha
            manufacturer: Inovelli
            model: VZM35-SN
    entity:
      name: Entity
      description: The light.*, switch.*, or fan.* entity for the LED we're setting.  Can
        be a comma separated list of Inovelli devices.  Mix and match types as you
        like.
      default: invalid
      selector:
        entity:
          multiple: true
          filter:
          - domain:
            - fan
            - light
            - switch
    LEDnumber:
      name: LED Number
      description: Sets the full LED bar by default, or specific LEDs (1 â€“ 7) starting
        at the bottom.
      default: all
      selector:
        select:
          options:
          - All
          - LED 1
          - LED 2
          - LED 3
          - LED 4
          - LED 5
          - LED 6
          - LED 7
          custom_value: false
          sort: false
          multiple: false
    LEDcolor:
      name: LED Color When On (non-effect)
      description: Sets the color of the LED status, which indicates brightness levels.
      default: no change
      selector:
        select:
          options:
          - 'Off'
          - Red
          - Orange
          - Lemon
          - Yellow
          - Lime
          - Green
          - Cyan
          - Teal
          - Blue
          - Purple
          - Magenta
          - Light Pink
          - Pink
          - Hot Pink
          - White
          - All Clear
          - All Unicorn
          - All USA
          custom_value: false
          sort: false
          multiple: false
    LEDcolor_off:
      name: LED Color When Off (non-effect). Red 800 and Blue Series only.
      description: Sets the color of the LED status, which indicates brightness levels.
      default: no change
      selector:
        select:
          options:
          - 'Off'
          - Red
          - Orange
          - Lemon
          - Yellow
          - Lime
          - Green
          - Cyan
          - Teal
          - Blue
          - Purple
          - Magenta
          - Light Pink
          - Pink
          - Hot Pink
          - White
          - All Clear
          - All Unicorn
          - All USA
          custom_value: false
          sort: false
          multiple: false
    LEDbrightness:
      name: LED Brightness When On (non-effect)
      description: Sets the brightness of the LED status when on. 0 means off.
      default: '11'
      selector:
        number:
          min: 0.0
          max: 10.0
          step: 0.1
          mode: slider
    LEDbrightness_off:
      name: LED Brightness When Off (non-effect).
      description: Sets the brightness of the LED status when off. 0 means off.
      default: '11'
      selector:
        number:
          min: 0.0
          max: 10.0
          step: 0.1
          mode: slider
    duration:
      name: Duration of Effect
      description: How long the effect will last.
      default: invalid
      selector:
        select:
          options:
          - 'Off'
          - Forever
          - 1 Second
          - 2 Seconds
          - 3 Seconds
          - 4 Seconds
          - 5 Seconds
          - 6 Seconds
          - 7 Seconds
          - 8 Seconds
          - 9 Seconds
          - 10 Seconds
          - 15 Seconds
          - 20 Seconds
          - 25 Seconds
          - 30 Seconds
          - 35 Seconds
          - 40 Seconds
          - 45 Seconds
          - 50 Seconds
          - 55 Seconds
          - 60 Seconds
          - 2 Minutes
          - 3 Minutes
          - 4 Minutes
          - 5 Minutes
          - 6 Minutes
          - 7 Minutes
          - 8 Minutes
          - 9 Minutes
          - 10 Minutes
          - 15 Minutes
          - 30 Minutes
          - 45 Minutes
          - 1 Hour
          - 2 Hours
          - Indefinitely
          custom_value: false
          sort: false
          multiple: false
    effect:
      name: Effect
      description: Type of effect
      default: Clear Effect
      selector:
        select:
          options:
          - 'Off'
          - Clear Effect
          - Aurora
          - Blink Fast
          - Blink Medium
          - Blink Slow
          - Chase Fast
          - Chase Medium
          - Chase Slow
          - Fall Fast
          - Fall Medium
          - Fall Slow
          - Open Close
          - Pulse
          - Rise Fast
          - Rise Medium
          - Rise Slow
          - Siren Fast
          - Siren Slow
          - Small to Big
          - Solid
          custom_value: false
          sort: false
          multiple: false
    brightness:
      name: Effect Brightness
      description: Sets the brightness of the LED's effect.  0 means off.
      default: '11'
      selector:
        number:
          min: 0.0
          max: 10.0
          step: 0.1
          mode: slider
    color:
      name: Effect Color
      description: Color of LED effect
      default: no change
      selector:
        select:
          options:
          - 'Off'
          - Red
          - Orange
          - Lemon
          - Yellow
          - Lime
          - Green
          - Cyan
          - Teal
          - Blue
          - Purple
          - Magenta
          - Light Pink
          - Pink
          - Hot Pink
          - White
          - All Clear
          - All Unicorn
          - All USA
          custom_value: false
          sort: false
          multiple: false
variables:
  input_floor: !input floor
  input_area: !input area
  input_group: !input group
  input_device: !input device
  input_entity: !input entity
  input_color: !input color
  input_duration: !input duration
  input_brightness: !input brightness
  input_effect: !input effect
  input_LEDcolor: !input LEDcolor
  input_LEDcolor_off: !input LEDcolor_off
  input_LEDbrightness: !input LEDbrightness
  input_LEDbrightness_off: !input LEDbrightness_off
  color_set:
    'off': 0
    red: 0
    orange: 8
    lemon: 28
    yellow: 42
    lime: 64
    green: 85
    cyan: 127
    teal: 145
    blue: 170
    purple: 190
    magenta: 212
    light pink: 220
    pink: 234
    hot pink: 234
    white: 255
    all clear:
      led 1: 255
      led 2: 255
      led 3: 255
      led 4: 255
      led 5: 255
      led 6: 255
      led 7: 255
      all: 0
    all unicorn:
      led 1: 234
      led 2: 234
      led 3: 170
      led 4: 170
      led 5: 170
      led 6: 85
      led 7: 85
      all: 0
    all usa:
      led 1: 170
      led 2: 170
      led 3: 255
      led 4: 255
      led 5: 0
      led 6: 0
      led 7: 0
      all: 255
  led_map:
    all: -1
    led 1: 0
    led 2: 1
    led 3: 2
    led 4: 3
    led 5: 4
    led 6: 5
    led 7: 6
  duration_values:
    'off': 0
    0: 0
    1 second: 1
    1 seconds: 1
    2 seconds: 2
    3 seconds: 3
    4 seconds: 4
    5 seconds: 5
    6 seconds: 6
    7 seconds: 7
    8 seconds: 8
    9 seconds: 9
    10 seconds: 10
    15 seconds: 15
    20 seconds: 20
    25 seconds: 25
    30 seconds: 30
    35 seconds: 35
    40 seconds: 40
    45 seconds: 45
    50 seconds: 50
    55 seconds: 55
    60 seconds: 60
    1 minute: 60
    1 minutes: 60
    2 minutes: 62
    3 minutes: 63
    4 minutes: 64
    5 minutes: 65
    6 minutes: 66
    7 minutes: 67
    8 minutes: 68
    9 minutes: 69
    10 minutes: 70
    15 minutes: 75
    30 minutes: 90
    45 minutes: 105
    60 minutes: 120
    1 hour: 120
    2 hours: 122
    forever: 255
    indefinitely: 255
  LZW30_effects:
    'off': 0
    clear effect: 0
    aurora: 0
    blink: 0
    blink fast: 0
    blink medium: 0
    blink slow: 0
    chase: 0
    chase fast: 0
    chase medium: 0
    chase slow: 0
    fall fast: 0
    fall medium: 0
    fall slow: 0
    open close: 0
    pulse: 0
    rise fast: 0
    rise medium: 0
    rise slow: 0
    siren fast: 0
    siren slow: 0
    small to big: 0
    solid: 0
    fast blink: 0
    slow blink: 0
  LZW31_effects:
    'off': 0
    clear effect: 0
    aurora: 0
    blink: 0
    blink fast: 0
    blink medium: 0
    blink slow: 0
    chase: 0
    chase fast: 0
    chase medium: 0
    chase slow: 0
    fall fast: 0
    fall medium: 0
    fall slow: 0
    open close: 0
    pulse: 0
    rise fast: 0
    rise medium: 0
    rise slow: 0
    siren fast: 0
    siren slow: 0
    small to big: 0
    solid: 0
    fast blink: 0
    slow blink: 0
  LZW30SN_effects:
    'off': 0
    clear effect: 255
    aurora: 4
    blink: 3
    blink fast: 2
    blink medium: 3
    blink slow: 3
    chase: 2
    chase fast: 2
    chase medium: 2
    chase slow: 3
    fall fast: 2
    fall medium: 3
    fall slow: 3
    open close: 4
    pulse: 4
    rise fast: 2
    rise medium: 3
    rise slow: 3
    siren fast: 4
    siren slow: 4
    small to big: 4
    solid: 1
    fast blink: 2
    slow blink: 3
  LZW31SN_effects:
    'off': 0
    clear effect: 255
    aurora: 4
    blink: 4
    blink fast: 3
    blink medium: 4
    blink slow: 4
    chase: 2
    chase fast: 2
    chase medium: 2
    chase slow: 2
    fall fast: 2
    fall medium: 2
    fall slow: 2
    open close: 2
    pulse: 5
    rise fast: 2
    rise medium: 2
    rise slow: 2
    siren slow: 2
    siren fast: 2
    small to big: 2
    solid: 1
    fast blink: 3
    slow blink: 4
  LZW36_light_effects:
    'off': 0
    clear effect: 255
    aurora: 4
    blink: 4
    blink fast: 3
    blink medium: 4
    blink slow: 4
    chase: 2
    chase fast: 2
    chase medium: 2
    chase slow: 2
    fall fast: 2
    fall medium: 2
    fall slow: 2
    open close: 2
    pulse: 5
    rise fast: 2
    rise medium: 2
    rise slow: 2
    siren slow: 2
    siren fast: 2
    small to big: 2
    solid: 1
    fast blink: 3
    slow blink: 4
  LZW36_fan_effects:
    'off': 0
    clear effect: 255
    aurora: 4
    blink: 4
    blink fast: 3
    blink medium: 4
    blink slow: 4
    chase: 2
    chase fast: 2
    chase medium: 2
    chase slow: 2
    fall fast: 2
    fall medium: 2
    fall slow: 2
    open close: 2
    pulse: 5
    rise fast: 2
    rise medium: 2
    rise slow: 2
    siren slow: 2
    siren fast: 2
    small to big: 2
    solid: 1
    fast blink: 3
    slow blink: 4
  VZW31SN_effects:
    'off': 0
    clear effect: 255
    aurora: 8
    blink: 15
    blink fast: 2
    blink medium: 15
    blink slow: 3
    chase: 5
    chase fast: 17
    chase medium: 5
    chase slow: 16
    fall fast: 11
    fall medium: 10
    fall slow: 9
    open close: 6
    pulse: 4
    rise fast: 14
    rise medium: 13
    rise slow: 12
    siren fast: 18
    siren slow: 19
    small to big: 7
    solid: 1
    fast blink: 2
    slow blink: 3
  VZM31SN_ZHA_effects:
    'off': 0
    clear effect: 255
    aurora: 8
    blink: 15
    blink fast: 2
    blink medium: 15
    blink slow: 3
    chase: 5
    chase fast: 17
    chase medium: 5
    chase slow: 16
    fall fast: 11
    fall medium: 10
    fall slow: 9
    open close: 6
    pulse: 4
    rise fast: 14
    rise medium: 13
    rise slow: 12
    siren fast: 18
    siren slow: 19
    small to big: 7
    solid: 1
    fast blink: 2
    slow blink: 3
  VZM31SN_Z2M_effects:
    'off': 'off'
    clear effect: clear_effect
    aurora: aurora
    blink: blink
    blink fast: fast_blink
    blink medium: medium_blink
    blink slow: slow_blink
    chase: chase
    chase fast: fast_chase
    chase medium: chase
    chase slow: slow_chase
    fall fast: fast_falling
    fall medium: medium_falling
    fall slow: slow_falling
    open close: open_close
    pulse: pulse
    rise fast: fast_rising
    rise medium: medium_rising
    rise slow: slow_rising
    siren fast: fast_siren
    siren slow: slow_siren
    small to big: small_to_big
    solid: solid
    fast blink: fast_blink
    slow blink: slow_blink
  VZM35SN_ZHA_effects:
    'off': 0
    clear effect: 255
    aurora: 8
    blink: 15
    blink fast: 2
    blink medium: 15
    blink slow: 3
    chase: 5
    chase fast: 17
    chase medium: 5
    chase slow: 16
    fall fast: 11
    fall medium: 10
    fall slow: 9
    open close: 6
    pulse: 4
    rise fast: 14
    rise medium: 13
    rise slow: 12
    siren fast: 18
    siren slow: 19
    small to big: 7
    solid: 1
    fast blink: 2
    slow blink: 3
  VZM35SN_Z2M_effects:
    'off': 'off'
    clear effect: clear_effect
    aurora: aurora
    blink: blink
    blink fast: fast_blink
    blink medium: medium_blink
    blink slow: slow_blink
    chase: chase
    chase fast: fast_chase
    chase medium: chase
    chase slow: slow_chase
    fall fast: fast_falling
    fall medium: medium_falling
    fall slow: slow_falling
    open close: open_close
    pulse: pulse
    rise fast: fast_rising
    rise medium: medium_rising
    rise slow: slow_rising
    siren fast: fast_siren
    siren slow: slow_siren
    small to big: small_to_big
    solid: solid
    fast blink: fast_blink
    slow blink: slow_blink
  zwave_models:
  - LZW30
  - LZW31
  - LZW31-SN
  - LZW30-SN
  - LZW36
  - VZW31-SN
  zigbee2mqtt_models:
  - Inovelli 2-in-1 switch + dimmer (VZM31-SN)
  - 2-in-1 switch + dimmer (VZM31-SN)
  - Inovelli Fan Controller (VZM35-SN)
  - Fan Controller (VZM35-SN)
  zha_models:
  - VZM31-SN
  - VZM35-SN
  allowed_domains:
  - fan
  - light
  - switch
  parameters:
    LZW30_all_effect_bulk: 'null'
    LZW30_all_effect_color: 'null'
    LZW30_all_effect_brightness: 'null'
    LZW30_all_effect_duration: 'null'
    LZW30_all_effect_effect: 'null'
    LZW30_all_ledcolor: LED Indicator Color
    LZW30_all_ledbrightness: LED Indicator Intensity (When on)
    LZW30_all_ledbrightness_off: LED Indicator Intensity (When Off)
    LZW31_all_effect_bulk: 'null'
    LZW31_all_effect_color: 'null'
    LZW31_all_effect_brightness: 'null'
    LZW31_all_effect_duration: 'null'
    LZW31_all_effect_effect: 'null'
    LZW31_all_ledcolor: LED Indicator Color
    LZW31_all_ledbrightness: LED Indicator Intensity
    LZW31_all_ledbrightness_off: LED Indicator Intensity (When Off)
    LZW31SN_all_effect_bulk: 16
    LZW31SN_all_effect_color: 'LED Indicator: Effect Color'
    LZW31SN_all_effect_brightness: 'LED Indicator: Effect Brightness'
    LZW31SN_all_effect_duration: 'LED Indicator: Effect Duration'
    LZW31SN_all_effect_effect: 'LED Indicator: Effect Type'
    LZW31SN_all_ledcolor: 'LED Indicator: Color'
    LZW31SN_all_ledbrightness: 'LED Indicator: Brightness When On'
    LZW31SN_all_ledbrightness_off: 'LED Indicator: Brightness When Off'
    LZW30SN_all_effect_bulk: 8
    LZW30SN_all_effect_color: LED Effect Color
    LZW30SN_all_effect_brightness: LED Effect Brightness
    LZW30SN_all_effect_duration: LED Effect Duration
    LZW30SN_all_effect_effect: LED Effect Type
    LZW30SN_all_ledcolor: LED Indicator Color
    LZW30SN_all_ledbrightness: LED Indicator Brightness
    LZW30SN_all_ledbrightness_off: LED Indicator Brightness When Off
    LZW36_light_all_effect_bulk: 24
    LZW36_light_all_effect_color: Light LED Effect Color
    LZW36_light_all_effect_brightness: Light LED Effect Brightness
    LZW36_light_all_effect_duration: Light LED Effect Duration
    LZW36_light_all_effect_effect: Light LED Effect Type
    LZW36_light_all_ledcolor: Light LED Indicator Color
    LZW36_light_all_ledbrightness: Light LED Strip Brightness
    LZW36_light_all_ledbrightness_off: Light LED Strip Brightness When Off
    LZW36_fan_all_effect_bulk: 25
    LZW36_fan_all_effect_color: Fan LED Effect Color
    LZW36_fan_all_effect_brightness: Fan LED Effect Brightness
    LZW36_fan_all_effect_duration: Fan LED Effect Duration
    LZW36_fan_all_effect_effect: Fan LED Effect Type
    LZW36_fan_all_ledcolor: Fan LED Indicator Color
    LZW36_fan_all_ledbrightness: Fan LED Strip Brightness
    LZW36_fan_all_ledbrightness_off: Fan LED Strip Brightness When Off
    VZW31SN_all_effect_bulk: 99
    VZW31SN_all_effect_color: All LED Strip Effect - Color
    VZW31SN_all_effect_brightness: All LED Strip Effect - Level
    VZW31SN_all_effect_duration: All LED Strip Effect - Duration
    VZW31SN_all_effect_effect: All LED Strip Effect - Effect
    VZW31SN_all_ledcolor: Default All LED Strip Color When On
    VZW31SN_all_ledcolor_off: Default All LED Strip Color When Off
    VZW31SN_all_ledbrightness: Default All LED Strip Brightness When On
    VZW31SN_all_ledbrightness_off: Default All LED Strip Brightness When Off
    VZW31SN_1_effect_bulk: 64
    VZW31SN_1_effect_color: LED1 Strip Effect - Color
    VZW31SN_1_effect_brightness: LED1 Strip Effect - Level
    VZW31SN_1_effect_duration: LED1 Strip Effect - Duration
    VZW31SN_1_effect_effect: LED1 Strip Effect - Effect
    VZW31SN_2_effect_bulk: 69
    VZW31SN_2_effect_color: LED2 Strip Effect - Color
    VZW31SN_2_effect_brightness: LED2 Strip Effect - Level
    VZW31SN_2_effect_duration: LED2 Strip Effect - Duration
    VZW31SN_2_effect_effect: LED2 Strip Effect - Effect
    VZW31SN_3_effect_bulk: 74
    VZW31SN_3_effect_color: LED3 Strip Effect - Color
    VZW31SN_3_effect_brightness: LED3 Strip Effect - Level
    VZW31SN_3_effect_duration: LED3 Strip Effect - Duration
    VZW31SN_3_effect_effect: LED3 Strip Effect - Effect
    VZW31SN_4_effect_bulk: 79
    VZW31SN_4_effect_color: LED4 Strip Effect - Color
    VZW31SN_4_effect_brightness: LED4 Strip Effect - Level
    VZW31SN_4_effect_duration: LED4 Strip Effect - Duration
    VZW31SN_4_effect_effect: LED4 Strip Effect - Effect
    VZW31SN_5_effect_bulk: 84
    VZW31SN_5_effect_color: LED5 Strip Effect - Color
    VZW31SN_5_effect_brightness: LED5 Strip Effect - Level
    VZW31SN_5_effect_duration: LED5 Strip Effect - Duration
    VZW31SN_5_effect_effect: LED5 Strip Effect - Effect
    VZW31SN_6_effect_bulk: 89
    VZW31SN_6_effect_color: LED6 Strip Effect - Color
    VZW31SN_6_effect_brightness: LED6 Strip Effect - Level
    VZW31SN_6_effect_duration: LED6 Strip Effect - Duration
    VZW31SN_6_effect_effect: LED6 Strip Effect - Effect
    VZW31SN_7_effect_bulk: 94
    VZW31SN_7_effect_color: LED7 Strip Effect - Color
    VZW31SN_7_effect_brightness: LED7 Strip Effect - Level
    VZW31SN_7_effect_duration: LED7 Strip Effect - Duration
    VZW31SN_7_effect_effect: LED7 Strip Effect - Effect
  floor: '{{ input_floor|default("invalid")|lower }}'
  area: '{{ input_area|default("invalid")|lower }}'
  group: '{{ input_group|default("invalid")|lower }}'
  device: '{{ input_device|default("invalid")|lower }}'
  entity: '{{ input_entity|default("invalid")|lower }}'
  entities_from_floor: "{% set floor_array = namespace(floor_list=[]) %} {% set entities
    = namespace(entities=[]) %} {% if floor != 'invalid' %}\n  {% if floor == 'all'
    %}\n    {% set floor_array.floor_list = floors() %}\n\n  {# Converting to a list
    #}\n  {% elif ',' in floor %}\n    {% set floornum = floor.split( ',' ) | count
    %}\n    {% for i in range(0,floornum) %}\n      {% set floor_array.floor_list
    = floor_array.floor_list + [floor.split( ',' )[i]|string|trim ] %}\n    {% endfor
    %}\n  {% elif floor[0]|count == 1 %}\n    {# if the first item in the list has
    only a single character, it isn't a valid list #}\n    {% set floor_array.floor_list
    = floor_array.floor_list + [floor|string|trim] %}\n  {% else %}\n    {% set floor_array.floor_list
    = floor %}\n  {% endif %}\n\n  {# Detecting entities #}\n  {% for floor in floor_array.floor_list
    %}\n    {% for area in floor_areas(floor) %}\n      {% for ent in area_entities(area)
    %}\n        {% if ent.split('.')[0] in allowed_domains %}\n          {% set entities.entities
    = entities.entities + [ent|string|trim] %}\n        {% endif %}\n      {% endfor
    %}\n    {% endfor %}\n  {% endfor %}\n{% endif %} {{ entities.entities|lower }}"
  entities_from_area: "{% set area_array = namespace(area_list=[]) %} {% set entities
    = namespace(entities=[]) %} {% if area != 'invalid' %}\n  {# I'd like to handle
    'all' as a list for templating simplicity #}\n  {# changing this to 'all' in area
    would trigger an area named 'all upstairs' #}\n  {% if area == 'all' %}\n    {%
    set area_array.area_list = areas() %}\n\n  {# Converting to a list #}\n  {% elif
    ',' in area %}\n    {% set areanum = area.split( ',' ) | count %}\n    {% for
    i in range(0,areanum) %}\n      {% set area_array.area_list = area_array.area_list
    + [area.split( ',' )[i]|string|trim ] %}\n    {% endfor %}\n  {% elif area[0]|count
    == 1 %}\n    {# if the first item in the list has only a single character, it
    isn't a valid list #}\n    {% set area_array.area_list = area_array.area_list
    + [area|string|trim] %}\n  {% else %}\n    {% set area_array.area_list = area
    %}\n  {% endif %}\n\n  {# Detecting entities #}\n  {% for area in area_array.area_list
    %}\n    {% for ent in area_entities(area) %}\n      {% if ent.split('.')[0] in
    allowed_domains %}\n        {% set entities.entities = entities.entities + [ent|string|trim]
    %}\n      {% endif %}\n    {% endfor %}\n  {% endfor %}\n{% endif %} {{ entities.entities|lower
    }}"
  entities_from_group: "{% set group_array = namespace(group_list=[]) %} {% set entities
    = namespace(entities=[]) %} {% if group != 'invalid' %}\n  {# Converting to a
    list #}\n  {% if ',' in group %}\n    {% set groupnum = group.split( ',' ) | count
    %}\n    {% for i in range(0,groupnum) %}\n      {% set group_array.group_list
    = group_array.group_list + [group.split( ',' )[i]|string|trim ] %}\n    {% endfor
    %}\n  {% elif group[0]|count == 1 %}\n    {# if the first item in the list has
    only a single character, it isn't a valid list #}\n    {% set group_array.group_list
    = group_array.group_list + [group|string|trim] %}\n  {% else %}\n    {% set group_array.group_list
    = group %}\n  {% endif %}\n\n  {# Detecting entities #}\n  {% for group in group_array.group_list
    %}\n    {% for entity in expand(group) %}\n      {% set ent = entity.entity_id
    %}\n      {% if ent.split('.')[0] in allowed_domains %}\n        {% set entities.entities
    = entities.entities + [ent|string|trim] %}\n      {% endif %}\n    {% endfor %}\n
    \ {% endfor %}\n{% endif %} {{ entities.entities|lower }}"
  entities_from_device: "{% set devices = namespace(devices=[]) %} {% set entities
    = namespace(entities=[]) %} {% if device != 'invalid' %}\n  {# Converting to a
    list #}\n  {% if ',' in device %}\n    {% set devicenum = device.split( ',' )
    | count %}\n    {% for i in range(0,devicenum) %}\n      {% set devices.devices
    = devices.devices + [device.split( ',' )[i]|string|trim ] %}\n    {% endfor %}\n
    \ {% elif device[0]|count == 1 %}\n    {# if the first item in the list has only
    a single character, it isn't a valid list #}\n    {% set devices.devices = devices.devices
    + [device|string|trim] %}\n  {% else %}\n    {% set devices.devices = device %}\n
    \ {% endif %}\n\n  {# Detecting entities #}\n  {% for device in devices.devices
    %}\n    {% for ent in device_entities(device) %}\n      {% if ent.split('.')[0]
    in allowed_domains %}\n        {% set entities.entities = entities.entities +
    [ent|string|trim] %}\n      {% endif %}\n    {% endfor %}\n  {% endfor %}\n{%
    endif %} {{ entities.entities|lower }}"
  entities_from_entity: "{% set entities_array = namespace(entities=[]) %} {% set
    entities = namespace(entities=[]) %} {% if entity != 'invalid' %}\n  {# Converting
    to a list #}\n  {% if ',' in entity %}\n    {% set entitynum = entity.split( ','
    ) | count %}\n    {% for i in range(0,entitynum) %}\n      {% set entities_array.entities
    = entities_array.entities + [entity.split( ',' )[i]|string|trim ] %}\n    {% endfor
    %}\n  {% elif entity[0]|count == 1 %}\n    {# if the first item in the list has
    only a single character, it isn't a valid list #}\n    {% set entities_array.entities
    = entities_array.entities + [entity|string|trim] %}\n  {% else %}\n    {% set
    entities_array.entities = entity %}\n  {% endif %}\n\n  {# Detecting entities
    #}\n  {% for ent in entities_array.entities %}\n    {% if ent.split('.')[0] in
    allowed_domains %}\n      {% set entities.entities = entities.entities + [ent|string|trim]
    %}\n    {% endif %}\n  {% endfor %}\n{% endif %} {{ entities.entities|lower }}"
  all_selected_entities: '{{ entities_from_floor + entities_from_area + entities_from_group
    + entities_from_device + entities_from_entity }}'
sequence:
- variables:
    LEDnumber: '{{ input_LEDnumber|default("all")|lower }}'
    color: '{{ input_color|default("no change")|lower }}'
    duration: '{{ input_duration|default("0")|lower }}'
    brightness: '{{ input_brightness|default("11")|float }}'
    effect: '{{ input_effect|default("clear effect")|lower }}'
    LEDcolor: '{{ input_LEDcolor|default("no change")|lower }}'
    LEDcolor_off: '{{ input_LEDcolor_off|default("no change")|lower }}'
    LEDbrightness: '{{ input_LEDbrightness|default("11")|float }}'
    LEDbrightness_off: '{{ input_LEDbrightness_off|default("11")|float }}'
- repeat:
    for_each:
    - device_type: LZW30
      call_type: zwave_js
      entities: "{% set entities = namespace(entities=[]) %} {% for ent in all_selected_entities
        %}\n  {% if  is_device_attr(ent,'model','LZW30') and ent.split('.')[0] ==
        'switch' and ent in integration_entities('zwave_js') %}\n    {% set entities.entities
        = entities.entities + [ent] %}\n  {% endif %}\n{% endfor %} {{ entities.entities
        }}"
    - device_type: LZW31
      call_type: zwave_js
      entities: "{% set entities = namespace(entities=[]) %} {% for ent in all_selected_entities
        %}\n  {% if  is_device_attr(ent,'model','LZW31') and ent.split('.')[0] ==
        'light' and ent in integration_entities('zwave_js') %}\n    {% set entities.entities
        = entities.entities + [ent] %}\n  {% endif %}\n{% endfor %} {{ entities.entities
        }}"
    - device_type: LZW30SN
      call_type: zwave_js
      entities: "{% set entities = namespace(entities=[]) %} {% for ent in all_selected_entities
        %}\n  {% if 'LZW30-SN' in device_attr(ent,'model') and ent.split('.')[0] ==
        'switch' and ent in integration_entities('zwave_js') %}\n    {% set entities.entities
        = entities.entities + [ent] %}\n  {% endif %}\n{% endfor %} {{ entities.entities
        }}"
    - device_type: LZW31SN
      call_type: zwave_js
      entities: "{% set entities = namespace(entities=[]) %} {% for ent in all_selected_entities
        %}\n  {% if 'LZW31-SN' in device_attr(ent,'model') and ent.split('.')[0] ==
        'light' and ent in integration_entities('zwave_js') %}\n    {% set entities.entities
        = entities.entities + [ent] %}\n  {% endif %}\n{% endfor %} {{ entities.entities
        }}"
    - device_type: LZW36_light
      call_type: zwave_js
      entities: "{% set entities = namespace(entities=[]) %} {% for ent in all_selected_entities
        %}\n  {% if 'LZW36' in device_attr(ent,'model') and ent.split('.')[0] == 'light'
        and ent in integration_entities('zwave_js') %}\n    {% set entities.entities
        = entities.entities + [ent] %}\n  {% endif %}\n{% endfor %} {{ entities.entities
        }}"
    - device_type: LZW36_fan
      call_type: zwave_js
      entities: "{% set entities = namespace(entities=[]) %} {% for ent in all_selected_entities
        %}\n  {% if 'LZW36' in device_attr(ent,'model') and ent.split('.')[0] == 'fan'
        and ent in integration_entities('zwave_js') %}\n    {% set entities.entities
        = entities.entities + [ent] %}\n  {% endif %}\n{% endfor %} {{ entities.entities
        }}"
    - device_type: VZW31SN
      call_type: zwave_js
      effects: '{{ iif(duration != 0,VZW31SN_effects[effect],0) }}'
      entities: "{% set entities = namespace(entities=[]) %} {% for ent in all_selected_entities
        %}\n  {% if 'VZW31-SN' in device_attr(ent,'model') and ent.split('.')[0] ==
        'light' and ent in integration_entities('zwave_js') %}\n    {% set entities.entities
        = entities.entities + [ent] %}\n  {% endif %}\n{% endfor %} {{ entities.entities
        }}"
    - device_type: VZM31SN
      call_type: z2m
      effects: '{{ iif(duration != 0,VZM31SN_Z2M_effects[effect],''clear_effect'')
        }}'
      entities: "{% set entities = namespace(entities=[]) %} {% for ent in all_selected_entities
        %}\n  {% if 'VZM31-SN' in device_attr(ent,'model') and ent.split('.')[0] ==
        'light' and ent not in integration_entities('zha') %}\n    {% set entities.entities
        = entities.entities + [ent] %}\n  {% endif %}\n{% endfor %} {{ entities.entities
        }}"
    - device_type: VZM35SN
      call_type: z2m
      effects: '{{ iif(duration != 0,VZM35SN_Z2M_effects[effect],''clear_effect'')
        }}'
      entities: "{% set entities = namespace(entities=[]) %} {% for ent in all_selected_entities
        %}\n  {% if 'VZM35-SN' in device_attr(ent,'model') and ent.split('.')[0] ==
        'fan' and ent not in integration_entities('zha') %}\n    {% set entities.entities
        = entities.entities + [ent] %}\n  {% endif %}\n{% endfor %} {{ entities.entities
        }}"
    - device_type: VZM31SN
      call_type: zha
      effects: '{{ iif(duration != 0,VZM31SN_ZHA_effects[effect],0) }}'
      entities: "{% set entities = namespace(entities=[]) %} {% for ent in all_selected_entities
        %}\n  {% if 'VZM31-SN' in device_attr(ent,'model') and ent.split('.')[0] ==
        'light' and ent in integration_entities('zha') %}\n    {% set entities.entities
        = entities.entities + [ent] %}\n  {% endif %}\n{% endfor %} {{ entities.entities
        }}"
    - device_type: VZM35SN
      call_type: zha
      effects: '{{ iif(duration != 0,VZM35SN_ZHA_effects[effect],0) }}'
      entities: "{% set entities = namespace(entities=[]) %} {% for ent in all_selected_entities
        %}\n  {% if 'VZM35-SN' in device_attr(ent,'model') and ent.split('.')[0] ==
        'fan' and ent in integration_entities('zha') %}\n    {% set entities.entities
        = entities.entities + [ent] %}\n  {% endif %}\n{% endfor %} {{ entities.entities
        }}"
    sequence:
    - condition: template
      value_template: '{{ repeat.item.entities |count >0 }}'
    - choose:
      - conditions: '{{ LEDcolor != "no change" }}'
        sequence:
        - choose:
          - conditions: '{{ repeat.item.call_type == ''zwave_js'' and ''all'' not
              in LEDcolor and LEDnumber == ''all'' }}'
            sequence:
            - service: zwave_js.set_config_parameter
              data:
                entity_id: '{{ repeat.item.entities }}'
                parameter: '{% set effect_param = repeat.item.device_type + ''_all''
                  + ''_ledcolor'' %} {{ parameters[effect_param] }}

                  '
                value: '{{ color_set[LEDcolor] }} '
        - choose:
          - conditions: '{{ repeat.item.call_type == ''z2m'' }}'
            sequence:
            - repeat:
                for_each: '{{ repeat.item.entities }} '
                sequence:
                - choose:
                  - conditions: '{{ ''all'' in LEDcolor and LEDnumber == ''all'' }}'
                    sequence:
                    - variables:
                        entity: '{{ repeat.item }}'
                    - repeat:
                        for_each:
                        - led 1
                        - led 2
                        - led 3
                        - led 4
                        - led 5
                        - led 6
                        - led 7
                        - all
                        sequence:
                        - service: mqtt.publish
                          data:
                            topic: zigbee2mqtt/{{ states[entity].attributes.friendly_name
                              }}/set
                            payload: "{% if repeat.item == 'all' %}\n  { \"ledColorWhenOn\":
                              {{ color_set[LEDcolor][repeat.item] }} }\n{% elif repeat.item
                              == 'led 1' %}\n  { \"defaultLed1ColorWhenOn\": {{ color_set[LEDcolor][repeat.item]
                              }} }\n{% elif repeat.item == 'led 2' %}\n  { \"defaultLed2ColorWhenOn\":
                              {{ color_set[LEDcolor][repeat.item] }} }\n{% elif repeat.item
                              == 'led 3' %}\n  { \"defaultLed3ColorWhenOn\": {{ color_set[LEDcolor][repeat.item]
                              }} }\n{% elif repeat.item == 'led 4' %}\n  { \"defaultLed4ColorWhenOn\":
                              {{ color_set[LEDcolor][repeat.item] }} }\n{% elif repeat.item
                              == 'led 5' %}\n  { \"defaultLed5ColorWhenOn\": {{ color_set[LEDcolor][repeat.item]
                              }} }\n{% elif repeat.item == 'led 6' %}\n  { \"defaultLed6ColorWhenOn\":
                              {{ color_set[LEDcolor][repeat.item] }} }\n{% elif repeat.item
                              == 'led 7' %}\n  { \"defaultLed7ColorWhenOn\": {{ color_set[LEDcolor][repeat.item]
                              }} }\n{% endif %}"
                  - conditions: '{{ ''all'' not in LEDcolor and LEDcolor != ''no change''
                      }}'
                    sequence:
                    - service: mqtt.publish
                      data:
                        topic: zigbee2mqtt/{{ states[repeat.item].attributes.friendly_name
                          }}/set
                        payload: "{% if LEDnumber == 'all' %}\n  { \"ledColorWhenOn\":
                          {{ color_set[LEDcolor] if 'led' not in LEDnumber and LEDcolor
                          != 'off' else 255 }} }\n{% elif LEDnumber == 'led 1' %}\n
                          \ { \"defaultLed1ColorWhenOn\": {{ color_set[LEDcolor] if
                          'led' not in LEDnumber and LEDcolor != 'off' else 255 }}
                          }\n{% elif LEDnumber == 'led 2' %}\n  { \"defaultLed2ColorWhenOn\":
                          {{ color_set[LEDcolor] if 'led' not in LEDnumber and LEDcolor
                          != 'off' else 255 }} }\n{% elif LEDnumber == 'led 3' %}\n
                          \ { \"defaultLed3ColorWhenOn\": {{ color_set[LEDcolor] if
                          'led' not in LEDnumber and LEDcolor != 'off' else 255 }}
                          }\n{% elif LEDnumber == 'led 4' %}\n  { \"defaultLed4ColorWhenOn\":
                          {{ color_set[LEDcolor] if 'led' not in LEDnumber and LEDcolor
                          != 'off' else 255 }} }\n{% elif LEDnumber == 'led 5' %}\n
                          \ { \"defaultLed5ColorWhenOn\": {{ color_set[LEDcolor] if
                          'led' not in LEDnumber and LEDcolor != 'off' else 255 }}
                          }\n{% elif LEDnumber == 'led 6' %}\n  { \"defaultLed6ColorWhenOn\":
                          {{ color_set[LEDcolor] if 'led' not in LEDnumber and LEDcolor
                          != 'off' else 255 }} }\n{% elif LEDnumber == 'led 7' %}\n
                          \ { \"defaultLed7ColorWhenOn\": {{ color_set[LEDcolor] if
                          'led' not in LEDnumber and LEDcolor != 'off' else 255 }}
                          }\n{% endif %}"
        - choose:
          - conditions: '{{ repeat.item.call_type == ''zha'' }}'
            sequence:
            - repeat:
                for_each: '{{ repeat.item.entities }}'
                sequence:
                - choose:
                  - conditions: '{{ ''all'' in LEDcolor and LEDnumber == ''all'' }}'
                    sequence:
                    - variables:
                        entity: '{{ repeat.item }}'
                    - repeat:
                        for_each:
                        - led 1
                        - led 2
                        - led 3
                        - led 4
                        - led 5
                        - led 6
                        - led 7
                        - all
                        sequence:
                        - service: zha.set_zigbee_cluster_attribute
                          data:
                            ieee: '{{ (device_attr( entity, ''identifiers'') | list).0.1
                              }}'
                            endpoint_id: 1
                            cluster_id: 64561
                            cluster_type: in
                            attribute: "{% if repeat.item == 'all' %}\n  {{ 0x005f
                              |int }}\n{% elif repeat.item == 'led 1' %}\n  {{ 0x003c
                              |int }}\n{% elif repeat.item == 'led 2' %}\n  {{ 0x0041
                              |int }}\n{% elif repeat.item == 'led 3' %}\n  {{ 0x0046
                              |int }}\n{% elif repeat.item == 'led 4' %}\n  {{ 0x004b
                              |int }}\n{% elif repeat.item == 'led 5' %}\n  {{ 0x0050
                              |int }}\n{% elif repeat.item == 'led 6' %}\n  {{ 0x0055
                              |int }}\n{% elif repeat.item == 'led 7' %}\n  {{ 0x005a
                              |int }}\n{% endif %}"
                            value: '{{ color_set[LEDcolor][repeat.item] }}'
                            manufacturer: 4655
                  - conditions: '{{ ''all'' not in LEDcolor and LEDcolor != ''no change''
                      }}'
                    sequence:
                    - service: zha.set_zigbee_cluster_attribute
                      data:
                        ieee: '{{ (device_attr( repeat.item, ''identifiers'') | list).0.1
                          }}'
                        endpoint_id: 1
                        cluster_id: 64561
                        cluster_type: in
                        attribute: "{% if LEDnumber == 'all' %}\n  {{ 0x005f |int
                          }}\n{% elif LEDnumber == 'led 1' %}\n  {{ 0x003c |int }}\n{%
                          elif LEDnumber == 'led 2' %}\n  {{ 0x0041 |int }}\n{% elif
                          LEDnumber == 'led 3' %}\n  {{ 0x0046 |int }}\n{% elif LEDnumber
                          == 'led 4' %}\n  {{ 0x004b |int }}\n{% elif LEDnumber ==
                          'led 5' %}\n  {{ 0x0050 |int }}\n{% elif LEDnumber == 'led
                          6' %}\n  {{ 0x0055 |int }}\n{% elif LEDnumber == 'led 7'
                          %}\n  {{ 0x005a |int }}\n{% endif %}"
                        value: "{% if 'led' in LEDnumber and LEDcolor == 'off' %}\n
                          \ 255\n{% else %}\n  {{ color_set[LEDcolor] }}\n{% endif
                          %}"
                        manufacturer: 4655
    - choose:
      - conditions: '{{ LEDcolor_off != "no change" }}'
        sequence:
        - choose:
          - conditions: '{{ repeat.item.call_type == ''zwave_js'' and repeat.item.device_type
              == ''VZW31SN'' and ''all'' not in LEDcolor and LEDnumber == ''all''
              }}'
            sequence:
            - service: zwave_js.set_config_parameter
              data:
                entity_id: '{{ repeat.item.entities }}'
                parameter: '{% set effect_param = repeat.item.device_type + ''_all''
                  + ''_ledcolor_off'' %} {{ parameters[effect_param] }}

                  '
                value: '{{ color_set[LEDcolor_off] }} '
        - choose:
          - conditions: '{{ repeat.item.call_type == ''z2m'' }}'
            sequence:
            - repeat:
                for_each: '{{ repeat.item.entities }} '
                sequence:
                - choose:
                  - conditions: '{{ ''all'' in LEDcolor_off and LEDnumber == ''all''
                      }}'
                    sequence:
                    - variables:
                        entity: '{{ repeat.item }}'
                    - repeat:
                        for_each:
                        - led 1
                        - led 2
                        - led 3
                        - led 4
                        - led 5
                        - led 6
                        - led 7
                        - all
                        sequence:
                        - service: mqtt.publish
                          data:
                            topic: zigbee2mqtt/{{ states[entity].attributes.friendly_name
                              }}/set
                            payload: "{% if repeat.item == 'all' %}\n  { \"ledColorWhenOff\":
                              {{ color_set[LEDcolor_off][repeat.item] }} }\n{% elif
                              repeat.item == 'led 1' %}\n  { \"defaultLed1ColorWhenOff\":
                              {{ color_set[LEDcolor_off][repeat.item] }} }\n{% elif
                              repeat.item == 'led 2' %}\n  { \"defaultLed2ColorWhenOff\":
                              {{ color_set[LEDcolor_off][repeat.item] }} }\n{% elif
                              repeat.item == 'led 3' %}\n  { \"defaultLed3ColorWhenOff\":
                              {{ color_set[LEDcolor_off][repeat.item] }} }\n{% elif
                              repeat.item == 'led 4' %}\n  { \"defaultLed4ColorWhenOff\":
                              {{ color_set[LEDcolor_off][repeat.item] }} }\n{% elif
                              repeat.item == 'led 5' %}\n  { \"defaultLed5ColorWhenOff\":
                              {{ color_set[LEDcolor_off][repeat.item] }} }\n{% elif
                              repeat.item == 'led 6' %}\n  { \"defaultLed6ColorWhenOff\":
                              {{ color_set[LEDcolor_off][repeat.item] }} }\n{% elif
                              repeat.item == 'led 7' %}\n  { \"defaultLed7ColorWhenOff\":
                              {{ color_set[LEDcolor_off][repeat.item] }} }\n{% endif
                              %}"
                  - conditions: '{{ ''all'' not in LEDcolor_off and LEDcolor_off !=
                      ''no change'' }}'
                    sequence:
                    - service: mqtt.publish
                      data:
                        topic: zigbee2mqtt/{{ states[repeat.item].attributes.friendly_name
                          }}/set
                        payload: "{% if LEDnumber == 'all' %}\n  { \"ledColorWhenOff\":
                          {{ color_set[LEDcolor_off] if 'led' not in LEDnumber and
                          LEDcolor_off != 'off' else 255 }} }\n{% elif LEDnumber ==
                          'led 1' %}\n  { \"defaultLed1ColorWhenOff\": {{ color_set[LEDcolor_off]
                          if 'led' not in LEDnumber and LEDcolor_off != 'off' else
                          255 }} }\n{% elif LEDnumber == 'led 2' %}\n  { \"defaultLed2ColorWhenOff\":
                          {{ color_set[LEDcolor_off] if 'led' not in LEDnumber and
                          LEDcolor_off != 'off' else 255 }} }\n{% elif LEDnumber ==
                          'led 3' %}\n  { \"defaultLed3ColorWhenOff\": {{ color_set[LEDcolor_off]
                          if 'led' not in LEDnumber and LEDcolor_off != 'off' else
                          255 }} }\n{% elif LEDnumber == 'led 4' %}\n  { \"defaultLed4ColorWhenOff\":
                          {{ color_set[LEDcolor_off] if 'led' not in LEDnumber and
                          LEDcolor_off != 'off' else 255 }} }\n{% elif LEDnumber ==
                          'led 5' %}\n  { \"defaultLed5ColorWhenOff\": {{ color_set[LEDcolor_off]
                          if 'led' not in LEDnumber and LEDcolor_off != 'off' else
                          255 }} }\n{% elif LEDnumber == 'led 6' %}\n  { \"defaultLed6ColorWhenOff\":
                          {{ color_set[LEDcolor_off] if 'led' not in LEDnumber and
                          LEDcolor_off != 'off' else 255 }} }\n{% elif LEDnumber ==
                          'led 7' %}\n  { \"defaultLed7ColorWhenOff\": {{ color_set[LEDcolor_off]
                          if 'led' not in LEDnumber and LEDcolor_off != 'off' else
                          255 }} }\n{% endif %}"
        - choose:
          - conditions: '{{ repeat.item.call_type == ''zha'' }}'
            sequence:
            - repeat:
                for_each: '{{ repeat.item.entities }}'
                sequence:
                - choose:
                  - conditions: '{{ ''all'' in LEDcolor_off and LEDnumber == ''all''
                      }}'
                    sequence:
                    - variables:
                        entity: '{{ repeat.item }}'
                    - repeat:
                        for_each:
                        - led 1
                        - led 2
                        - led 3
                        - led 4
                        - led 5
                        - led 6
                        - led 7
                        - all
                        sequence:
                        - service: zha.set_zigbee_cluster_attribute
                          data:
                            ieee: '{{ (device_attr( entity, ''identifiers'') | list).0.1
                              }}'
                            endpoint_id: 1
                            cluster_id: 64561
                            cluster_type: in
                            attribute: "{% if repeat.item == 'all' %}\n  {{ 0x0060
                              |int }}\n{% elif repeat.item == 'led 1' %}\n  {{ 0x003d
                              |int }}\n{% elif repeat.item == 'led 2' %}\n  {{ 0x0042
                              |int }}\n{% elif repeat.item == 'led 3' %}\n  {{ 0x0047
                              |int }}\n{% elif repeat.item == 'led 4' %}\n  {{ 0x004c
                              |int }}\n{% elif repeat.item == 'led 5' %}\n  {{ 0x0051
                              |int }}\n{% elif repeat.item == 'led 6' %}\n  {{ 0x0056
                              |int }}\n{% elif repeat.item == 'led 7' %}\n  {{ 0x005b
                              |int }}\n{% endif %}"
                            value: '{{ color_set[LEDcolor_off][repeat.item] }}'
                            manufacturer: 4655
                  - conditions: '{{ ''all'' not in LEDcolor_off and LEDcolor_off !=
                      ''no change'' }}'
                    sequence:
                    - service: zha.set_zigbee_cluster_attribute
                      data:
                        ieee: '{{ (device_attr( repeat.item, ''identifiers'') | list).0.1
                          }}'
                        endpoint_id: 1
                        cluster_id: 64561
                        cluster_type: in
                        attribute: "{% if LEDnumber == 'all' %}\n  {{ 0x0060 |int
                          }}\n{% elif LEDnumber == 'led 1' %}\n  {{ 0x003d |int }}\n{%
                          elif LEDnumber == 'led 2' %}\n  {{ 0x0042 |int }}\n{% elif
                          LEDnumber == 'led 3' %}\n  {{ 0x0047 |int }}\n{% elif LEDnumber
                          == 'led 4' %}\n  {{ 0x004c |int }}\n{% elif LEDnumber ==
                          'led 5' %}\n  {{ 0x0051 |int }}\n{% elif LEDnumber == 'led
                          6' %}\n  {{ 0x0056 |int }}\n{% elif LEDnumber == 'led 7'
                          %}\n  {{ 0x005b |int }}\n{% endif %}"
                        value: "{% if 'led' in LEDnumber and LEDcolor_off == 'off'
                          %}\n  255\n{% else %}\n  {{ color_set[LEDcolor_off] }}\n{%
                          endif %}"
                        manufacturer: 4655
    - choose:
      - conditions: '{{ LEDbrightness is defined and LEDbrightness != 11 }} '
        sequence:
        - choose:
          - conditions: '{{ repeat.item.call_type == ''zwave_js'' and ''all'' in LEDnumber
              and ''all'' not in LEDcolor and LEDnumber == ''all'' }}'
            sequence:
            - service: zwave_js.set_config_parameter
              data:
                entity_id: '{{ repeat.item.entities }}'
                parameter: '{% set effect_param = repeat.item.device_type + ''_all''
                  + ''_ledbrightness'' %} {{ "off" if parameters[effect_param] ==
                  0 else parameters[effect_param] }}'
                value: "{% if 'LZW' in repeat.item.device_type %}\n  {{ LEDbrightness
                  | round(0) | int  }}\n{% else %}\n  {{ (LEDbrightness * 10) | int
                  }}\n{% endif %}"
        - choose:
          - conditions: '{{ repeat.item.call_type == ''z2m'' }}'
            sequence:
            - repeat:
                for_each: '{{ repeat.item.entities }}

                  '
                sequence:
                - choose:
                  - conditions: '{{ LEDbrightness != 11 and LEDnumber == ''all'' }}'
                    sequence:
                    - variables:
                        entity: '{{ repeat.item }}'
                    - repeat:
                        for_each:
                        - led 1
                        - led 2
                        - led 3
                        - led 4
                        - led 5
                        - led 6
                        - led 7
                        - all
                        sequence:
                        - service: mqtt.publish
                          data:
                            topic: zigbee2mqtt/{{ states[entity].attributes.friendly_name
                              }}/set
                            payload: "{% if repeat.item == 'all' %}\n  { \"ledIntensityWhenOn\":
                              {{ (LEDbrightness * 10) | int }} }\n{% elif repeat.item
                              == 'led 1' %}\n  { \"defaultLed1IntensityWhenOn\": {{
                              (LEDbrightness * 10) | int }} }\n{% elif repeat.item
                              == 'led 2' %}\n  { \"defaultLed2IntensityWhenOn\": {{
                              (LEDbrightness * 10) | int }} }\n{% elif repeat.item
                              == 'led 3' %}\n  { \"defaultLed3IntensityWhenOn\": {{
                              (LEDbrightness * 10) | int }} }\n{% elif repeat.item
                              == 'led 4' %}\n  { \"defaultLed4IntensityWhenOn\": {{
                              (LEDbrightness * 10) | int }} }\n{% elif repeat.item
                              == 'led 5' %}\n  { \"defaultLed5IntensityWhenOn\": {{
                              (LEDbrightness * 10) | int }} }\n{% elif repeat.item
                              == 'led 6' %}\n  { \"defaultLed6IntensityWhenOn\": {{
                              (LEDbrightness * 10) | int }} }\n{% elif repeat.item
                              == 'led 7' %}\n  { \"defaultLed7IntensityWhenOn\": {{
                              (LEDbrightness * 10) | int }} }\n{% endif %}"
                  - conditions: '{{ LEDbrightness != 11 and LEDnumber != ''all'' }}'
                    sequence:
                    - service: mqtt.publish
                      data:
                        topic: zigbee2mqtt/{{ states[repeat.item].attributes.friendly_name
                          }}/set
                        payload: "{% if LEDnumber == 'all' %}\n  { \"ledIntensityWhenOn\":
                          {{ (LEDbrightness * 10) | int }} }\n{% elif LEDnumber ==
                          'led 1' %}\n  { \"defaultLed1IntensityWhenOn\": {{ (LEDbrightness
                          * 10) | int }} }\n{% elif LEDnumber == 'led 2' %}\n  { \"defaultLed2IntensityWhenOn\":
                          {{ (LEDbrightness * 10) | int }} }\n{% elif LEDnumber ==
                          'led 3' %}\n  { \"defaultLed3IntensityWhenOn\": {{ (LEDbrightness
                          * 10) | int }} }\n{% elif LEDnumber == 'led 4' %}\n  { \"defaultLed4IntensityWhenOn\":
                          {{ (LEDbrightness * 10) | int }} }\n{% elif LEDnumber ==
                          'led 5' %}\n  { \"defaultLed5IntensityWhenOn\": {{ (LEDbrightness
                          * 10) | int }} }\n{% elif LEDnumber == 'led 6' %}\n  { \"defaultLed6IntensityWhenOn\":
                          {{ (LEDbrightness * 10) | int }} }\n{% elif LEDnumber ==
                          'led 7' %}\n  { \"defaultLed7IntensityWhenOn\": {{ (LEDbrightness
                          * 10) | int }} }\n{% endif %}"
        - choose:
          - conditions: '{{ repeat.item.call_type == ''zha'' }}'
            sequence:
            - repeat:
                for_each: '{{ repeat.item.entities }}'
                sequence:
                - choose:
                  - conditions: '{{ LEDbrightness != 11 and LEDnumber == ''all'' }}'
                    sequence:
                    - variables:
                        entity: '{{ repeat.item }}'
                    - repeat:
                        for_each:
                        - led 1
                        - led 2
                        - led 3
                        - led 4
                        - led 5
                        - led 6
                        - led 7
                        - all
                        sequence:
                        - service: zha.set_zigbee_cluster_attribute
                          data:
                            ieee: '{{ (device_attr( entity, ''identifiers'') | list).0.1
                              }}'
                            endpoint_id: 1
                            cluster_id: 64561
                            cluster_type: in
                            attribute: "{% if repeat.item == 'all' %}\n  {{ 0x0061
                              |int }}\n{% elif repeat.item == 'led 1' %}\n  {{ 0x003e
                              |int }}\n{% elif repeat.item == 'led 2' %}\n  {{ 0x0043
                              |int }}\n{% elif repeat.item == 'led 3' %}\n  {{ 0x0048
                              |int }}\n{% elif repeat.item == 'led 4' %}\n  {{ 0x004d
                              |int }}\n{% elif repeat.item == 'led 5' %}\n  {{ 0x0052
                              |int }}\n{% elif repeat.item == 'led 6' %}\n  {{ 0x0057
                              |int }}\n{% elif repeat.item == 'led 7' %}\n  {{ 0x005c
                              |int }}\n{% endif %}"
                            value: '{{ (LEDbrightness * 10) | int }}'
                            manufacturer: 4655
                  - conditions: '{{ LEDbrightness != 11 and LEDnumber != ''all'' }}'
                    sequence:
                    - service: zha.set_zigbee_cluster_attribute
                      data:
                        ieee: '{{ (device_attr( repeat.item, ''identifiers'') | list).0.1
                          }}'
                        endpoint_id: 1
                        cluster_id: 64561
                        cluster_type: in
                        attribute: "{% if LEDnumber == 'all' %}\n  {{ 0x0061 |int
                          }}\n{% elif LEDnumber == 'led 1' %}\n  {{ 0x003e |int }}\n{%
                          elif LEDnumber == 'led 2' %}\n  {{ 0x0043 |int }}\n{% elif
                          LEDnumber == 'led 3' %}\n  {{ 0x0048 |int }}\n{% elif LEDnumber
                          == 'led 4' %}\n  {{ 0x004d |int }}\n{% elif LEDnumber ==
                          'led 5' %}\n  {{ 0x0052 |int }}\n{% elif LEDnumber == 'led
                          6' %}\n  {{ 0x0057 |int }}\n{% elif LEDnumber == 'led 7'
                          %}\n  {{ 0x005c |int }}\n{% endif %}"
                        value: '{{ (LEDbrightness * 10) | int }}'
                        manufacturer: 4655
    - choose:
      - conditions: '{{ LEDbrightness_off is defined and LEDbrightness_off != 11 }} '
        sequence:
        - choose:
          - conditions: '{{ repeat.item.call_type == ''zwave_js'' and ''all'' not
              in LEDcolor and LEDnumber == ''all'' }}'
            sequence:
            - service: zwave_js.set_config_parameter
              data:
                entity_id: '{{ repeat.item.entities }}'
                parameter: '{% set effect_param = repeat.item.device_type + ''_all''
                  + ''_ledbrightness_off'' %} {{ "off" if parameters[effect_param]
                  == 0 else parameters[effect_param] }}'
                value: "{% if 'LZW' in repeat.item.device_type %}\n  {{ LEDbrightness_off
                  | round(0) | int  }}\n{% else %}\n  {{ (LEDbrightness_off * 10)
                  | int }}\n{% endif %}"
        - choose:
          - conditions: '{{ repeat.item.call_type == ''z2m'' }}'
            sequence:
            - repeat:
                for_each: '{{ repeat.item.entities }} '
                sequence:
                - choose:
                  - conditions: '{{ LEDbrightness_off != 11 and LEDnumber == ''all''
                      }}'
                    sequence:
                    - variables:
                        entity: '{{ repeat.item }}'
                    - repeat:
                        for_each:
                        - led 1
                        - led 2
                        - led 3
                        - led 4
                        - led 5
                        - led 6
                        - led 7
                        - all
                        sequence:
                        - service: mqtt.publish
                          data:
                            topic: zigbee2mqtt/{{ states[entity].attributes.friendly_name
                              }}/set
                            payload: "{% if repeat.item == 'all' %}\n  { \"ledIntensityWhenOff\":
                              {{ (LEDbrightness_off * 10) | int }} }\n{% elif repeat.item
                              == 'led 1' %}\n  { \"defaultLed1IntensityWhenOff\":
                              {{ (LEDbrightness_off * 10) | int }} }\n{% elif repeat.item
                              == 'led 2' %}\n  { \"defaultLed2IntensityWhenOff\":
                              {{ (LEDbrightness_off * 10) | int }} }\n{% elif repeat.item
                              == 'led 3' %}\n  { \"defaultLed3IntensityWhenOff\":
                              {{ (LEDbrightness_off * 10) | int }} }\n{% elif repeat.item
                              == 'led 4' %}\n  { \"defaultLed4IntensityWhenOff\":
                              {{ (LEDbrightness_off * 10) | int }} }\n{% elif repeat.item
                              == 'led 5' %}\n  { \"defaultLed5IntensityWhenOff\":
                              {{ (LEDbrightness_off * 10) | int }} }\n{% elif repeat.item
                              == 'led 6' %}\n  { \"defaultLed6IntensityWhenOff\":
                              {{ (LEDbrightness_off * 10) | int }} }\n{% elif repeat.item
                              == 'led 7' %}\n  { \"defaultLed7IntensityWhenOff\":
                              {{ (LEDbrightness_off * 10) | int }} }\n{% endif %}"
                  - conditions: '{{ LEDbrightness_off != 11 and LEDnumber != ''all''
                      }}'
                    sequence:
                    - service: mqtt.publish
                      data:
                        topic: zigbee2mqtt/{{ states[repeat.item].attributes.friendly_name
                          }}/set
                        payload: "{% if LEDnumber == 'all' %}\n  { \"ledIntensityWhenOff\":
                          {{ (LEDbrightness_off * 10) | int }} }\n{% elif LEDnumber
                          == 'led 1' %}\n  { \"defaultLed1IntensityWhenOff\": {{ (LEDbrightness_off
                          * 10) | int }} }\n{% elif LEDnumber == 'led 2' %}\n  { \"defaultLed2IntensityWhenOff\":
                          {{ (LEDbrightness_off * 10) | int }} }\n{% elif LEDnumber
                          == 'led 3' %}\n  { \"defaultLed3IntensityWhenOff\": {{ (LEDbrightness_off
                          * 10) | int }} }\n{% elif LEDnumber == 'led 4' %}\n  { \"defaultLed4IntensityWhenOff\":
                          {{ (LEDbrightness_off * 10) | int }} }\n{% elif LEDnumber
                          == 'led 5' %}\n  { \"defaultLed5IntensityWhenOff\": {{ (LEDbrightness_off
                          * 10) | int }} }\n{% elif LEDnumber == 'led 6' %}\n  { \"defaultLed6IntensityWhenOff\":
                          {{ (LEDbrightness_off * 10) | int }} }\n{% elif LEDnumber
                          == 'led 7' %}\n  { \"defaultLed7IntensityWhenOff\": {{ (LEDbrightness_off
                          * 10) | int }} }\n{% endif %}"
        - choose:
          - conditions: '{{ repeat.item.call_type == ''zha'' }}'
            sequence:
            - repeat:
                for_each: '{{ repeat.item.entities }}'
                sequence:
                - choose:
                  - conditions: '{{ LEDbrightness_off != 11 and LEDnumber == ''all''
                      }}'
                    sequence:
                    - variables:
                        entity: '{{ repeat.item }}'
                    - repeat:
                        for_each:
                        - led 1
                        - led 2
                        - led 3
                        - led 4
                        - led 5
                        - led 6
                        - led 7
                        - all
                        sequence:
                        - service: zha.set_zigbee_cluster_attribute
                          data:
                            ieee: '{{ (device_attr( entity, ''identifiers'') | list).0.1
                              }}'
                            endpoint_id: 1
                            cluster_id: 64561
                            cluster_type: in
                            attribute: "{% if repeat.item == 'all' %}\n  {{ 0x0062
                              |int }}\n{% elif repeat.item == 'led 1' %}\n  {{ 0x003f
                              |int }}\n{% elif repeat.item == 'led 2' %}\n  {{ 0x0044
                              |int }}\n{% elif repeat.item == 'led 3' %}\n  {{ 0x0049
                              |int }}\n{% elif repeat.item == 'led 4' %}\n  {{ 0x004e
                              |int }}\n{% elif repeat.item == 'led 5' %}\n  {{ 0x0053
                              |int }}\n{% elif repeat.item == 'led 6' %}\n  {{ 0x0058
                              |int }}\n{% elif repeat.item == 'led 7' %}\n  {{ 0x005d
                              |int }}\n{% endif %}"
                            value: '{{ (LEDbrightness_off * 10) | int }}'
                            manufacturer: 4655
                  - conditions: '{{ LEDbrightness_off != 11 and LEDnumber != ''all''
                      }}'
                    sequence:
                    - service: zha.set_zigbee_cluster_attribute
                      data:
                        ieee: '{{ (device_attr( repeat.item, ''identifiers'') | list).0.1
                          }}'
                        endpoint_id: 1
                        cluster_id: 64561
                        cluster_type: in
                        attribute: "{% if LEDnumber == 'all' %}\n  {{ 0x0062 |int
                          }}\n{% elif LEDnumber == 'led 1' %}\n  {{ 0x003f |int }}\n{%
                          elif LEDnumber == 'led 2' %}\n  {{ 0x0044 |int }}\n{% elif
                          LEDnumber == 'led 3' %}\n  {{ 0x0049 |int }}\n{% elif LEDnumber
                          == 'led 4' %}\n  {{ 0x004e |int }}\n{% elif LEDnumber ==
                          'led 5' %}\n  {{ 0x0053 |int }}\n{% elif LEDnumber == 'led
                          6' %}\n  {{ 0x0058 |int }}\n{% elif LEDnumber == 'led 7'
                          %}\n  {{ 0x005d |int }}\n{% endif %}"
                        value: '{{ (LEDbrightness_off * 10) | int }}'
                        manufacturer: 4655
    - choose:
      - conditions: "{{ effect != \"off\" and effect != \"clear effect\" and color
          != \"no change\" and duration != 0 and brightness != 11 and\n   repeat.item.device_type
          != 'LZW30' and repeat.item.device_type != 'LZW31' }}"
        sequence:
        - choose:
          - conditions: '{{ repeat.item.call_type == ''zwave_js'' and ''VZW'' not
              in repeat.item.device_type and repeat.item.device_type != ''LZW30''
              and repeat.item.device_type != ''LZW31'' and ''all'' in LEDnumber and
              ''all'' not in LEDcolor }}'
            sequence:
            - service: zwave_js.bulk_set_partial_config_parameters
              data:
                entity_id: '{{ repeat.item.entities }}'
                parameter: '{% set bulk_param = repeat.item.device_type + ''_'' +
                  LEDnumber + ''_effect_bulk'' %} {{ parameters[bulk_param] }}'
                value: "{% if repeat.item.device_type == \"LZW30SN\" %}\n  {{ color_set[color]
                  + ((brightness | round(0) | int) * 256) + (duration_values[duration]
                  * 65536) + (LZW30SN_effects[effect] * 16777216) }}\n{% elif repeat.item.device_type
                  == \"LZW31SN\" %}\n  {{ color_set[color] + ((brightness | round(0)
                  | int) * 256) + (duration_values[duration] * 65536) + (LZW31SN_effects[effect]
                  * 16777216) }}\n{% elif repeat.item.device_type == \"LZW36_light\"
                  %}\n  {{ color_set[color] + ((brightness | round(0) | int) * 256)
                  + (duration_values[duration] * 65536) + (LZW36_light_effects[effect]
                  * 16777216) }}\n{% elif repeat.item.device_type == \"LZW36_fan\"
                  %}\n  {{ color_set[color] + ((brightness | round(0) | int) * 256)
                  + (duration_values[duration] * 65536) + (LZW36_fan_effects[effect]
                  * 16777216) }}\n{% endif %}"
        - choose:
          - conditions: '{{ repeat.item.call_type == ''zwave_js'' and ''VZW'' in repeat.item.device_type
              and ''all'' in LEDnumber and ''all'' not in LEDcolor }}'
            sequence:
            - service: zwave_js.bulk_set_partial_config_parameters
              data:
                entity_id: '{{ repeat.item.entities }}'
                parameter: '{% set bulk_param = repeat.item.device_type + ''_'' +
                  LEDnumber + ''_effect_bulk'' %} {{ parameters[bulk_param] }}'
                value: '{{ (color_set[color] * 65536) + (brightness * 10 * 256) +
                  (duration_values[duration]) + (VZW31SN_effects[effect] * 16777216)
                  }}'
        - choose:
          - conditions: '{{ repeat.item.call_type == ''z2m'' and ''all'' not in LEDcolor
              }}'
            sequence:
            - variables:
                effects: '{{ repeat.item.effects }}'
            - repeat:
                for_each: '{{ repeat.item.entities }}'
                sequence:
                - service: mqtt.publish
                  data:
                    topic: zigbee2mqtt/{{ states[repeat.item].attributes.friendly_name
                      }}/set
                    payload: '{"led_effect":{"color":"{{ color_set[color] }}","duration":"{{
                      duration_values[duration] }}","effect":"{{ effects }}","level":"{{
                      (brightness * 256 / 10) | int }}" }}'
        - choose:
          - conditions: '{{ repeat.item.call_type == ''zha'' and ''all'' not in LEDcolor
              }}'
            sequence:
            - variables:
                effects: '{{ repeat.item.effects }}'
            - repeat:
                for_each: '{{ repeat.item.entities }} '
                sequence:
                - service: zha.issue_zigbee_cluster_command
                  data:
                    ieee: '{{ (device_attr(repeat.item, ''identifiers'')|list).0.1
                      }}'
                    endpoint_id: 1
                    cluster_id: 64561
                    cluster_type: in
                    command: '{{ iif(''all'' in LEDnumber,1,3) }}'
                    command_type: server
                    params:
                      led_number: '{{ led_map[LEDnumber]|int }}'
                      led_color: '{{ color_set[color] }}'
                      led_duration: '{{ duration_values[duration] }}'
                      led_effect: '{{ effects }}'
                      led_level: '{{ (brightness * 10 | int) }}'
                    manufacturer: 4655
      default:
      - choose:
        - conditions: '{{ repeat.item.call_type == ''zwave_js'' and repeat.item.device_type
            != ''LZW30'' and repeat.item.device_type != ''LZW31'' and ''all'' in LEDnumber
            }}'
          sequence:
          - service: zwave_js.set_config_parameter
            data:
              entity_id: '{{ repeat.item.entities }}'
              parameter: '{% set effect_param = repeat.item.device_type + ''_'' +
                LEDnumber + ''_effect_effect'' %} {{ parameters[effect_param] }}'
              value: 255
          - service: zwave_js.set_config_parameter
            data:
              entity_id: '{{ repeat.item.entities }}'
              parameter: '{% set effect_param = repeat.item.device_type + ''_'' +
                LEDnumber + ''_effect_duration'' %} {{ parameters[effect_param] }}'
              value: 0
        - conditions: '{{ repeat.item.call_type == ''zwave_js'' and ''VZW'' in repeat.item.device_type
            }}'
          sequence:
          - variables:
              effects: '{{ repeat.item.effects }}'
          - service: zwave_js.set_config_parameter
            data:
              entity_id: '{{ repeat.item.entities }}'
              parameter: '{% set effect_param = repeat.item.device_type + ''_'' +
                LEDnumber + ''_effect_effect'' %} {{ parameters[effect_param] }}'
              value: '{{ effects }}'
          - service: zwave_js.set_config_parameter
            data:
              entity_id: '{{ repeat.item.entities }}'
              parameter: '{% set effect_param = repeat.item.device_type + ''_'' +
                LEDnumber + ''_effect_duration'' %} {{ parameters[effect_param] }}'
              value: '{{ duration_values[duration] }}'
      - choose:
        - conditions: '{{ repeat.item.call_type == ''z2m'' }}'
          sequence:
          - variables:
              effects: '{{ repeat.item.effects }}'
          - repeat:
              for_each: '{{ repeat.item.entities }} '
              sequence:
              - service: mqtt.publish
                data:
                  topic: zigbee2mqtt/{{ states[repeat.item].attributes.friendly_name
                    }}/set
                  payload: '{"led_effect":{"duration":"{{duration_values[duration]}}","effect":"{{effects}}"
                    }}'
      - choose:
        - conditions: '{{ repeat.item.call_type == ''zha'' }}'
          sequence:
          - variables:
              effects: '{{ repeat.item.effects }}'
          - repeat:
              for_each: '{{ repeat.item.entities }} '
              sequence:
              - service: zha.issue_zigbee_cluster_command
                data:
                  ieee: '{{ (device_attr(repeat.item, ''identifiers'')|list).0.1 }}'
                  endpoint_id: 1
                  cluster_id: 64561
                  cluster_type: in
                  command: 1
                  command_type: server
                  params:
                    led_number: -1
                    led_effect: '{{effects}}'
                    led_color: 0
                    led_level: 0
                    led_duration: '{{duration_values[duration]}}'
                  manufacturer: 4655
